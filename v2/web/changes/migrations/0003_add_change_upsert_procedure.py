# Generated by Django 4.2.3 on 2023-08-02 20:24

from django.db import migrations


SQL = """
CREATE PROCEDURE change_upsert(
    cve_name text,
    change      uuid,
    created     timestamptz,
    updated     timestamptz,
    commit_hash text,
    file_path   text,
    events      jsonb
)
LANGUAGE plpgsql
AS $$
DECLARE
   _cve_id    uuid;
   _change_id uuid;
   _event     json;
BEGIN
    -- retrieve the cve ID
    SELECT id INTO _cve_id FROM opencve_cves WHERE cve_id = cve_name;

    -- create a new change
    INSERT INTO opencve_changes (id, created_at, updated_at, cve_id, commit, path)
    VALUES(change, created, updated, _cve_id, commit_hash, file_path)
    ON CONFLICT (created_at, cve_id, commit) DO NOTHING;

    -- retrieve the change ID
    SELECT id INTO _change_id FROM opencve_changes AS oc
    WHERE created_at = created AND cve_id = _cve_id AND commit = commit_hash AND path = file_path;

    -- add the events in it
    FOR _event IN SELECT * FROM json_array_elements(events::json)
    LOOP
        INSERT INTO opencve_events (id, created_at, updated_at, change_id, cve_id, type, details)
        VALUES(uuid_generate_v4(), created, updated, _change_id, _cve_id, trim('"' FROM (_event -> 'type')::text), _event -> 'details')
        ON CONFLICT (created_at, change_id, type) DO NOTHING;
    END LOOP;

END;
$$;
"""

REVERSE_SQL = """
DROP PROCEDURE change_upsert(
    cve_name    text,
    change      uuid,
    created     timestamptz,
    updated     timestamptz,
    commit_hash text,
    path        text,
    events      jsonb
);
"""


class Migration(migrations.Migration):

    dependencies = [
        ('changes', '0002_add_reports_changes_events'),
    ]

    operations = [migrations.RunSQL(sql=SQL, reverse_sql=REVERSE_SQL)]
